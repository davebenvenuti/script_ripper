#!/usr/bin/env bash

# https://jellyfin.org/docs/general/administration/installing.html

# Download the latest container image.
docker pull jellyfin/jellyfin

# Create persistent storage for configuration and cache data.
# Either create two directories on the host and use bind mounts:
# Or create two persistent volumes:
mkdir /path/to/config
mkdir /path/to/cache

# Create persistent storage for configuration and cache data.
# Either create two directories on the host and use bind mounts:
# Or create two persistent volumes:
docker volume create jellyfin-config
docker volume create jellyfin-cache

# Open the unRaid GUI (at least unRaid 6.5) and click on the Docker tab.
Docker

# Add the following line under "Template Repositories" and save the options.
https://github.com/jellyfin/jellyfin/blob/master/deployment/unraid/docker-templates

# Install Podman:
sudo dnf install -y podman

# Create and run a Jellyfin container:
podman run \
 --detach \
 --label "io.containers.autoupdate=registry" \
 --name myjellyfin \
 --publish 8096:8096/tcp \
 --rm \
 --user $(id -u):$(id -g) \
 --userns keep-id \
 --volume jellyfin-cache:/cache:Z \
 --volume jellyfin-config:/config:Z \
 --mount type=bind,source=/path/to/media,destination=/media,ro=true \
 docker.io/jellyfin/jellyfin:latest

# Open the necessary ports in your machine's firewall if you wish to permit access to the Jellyfin server from outside the host.
# This is not done automatically when using rootless Podman.
# If your distribution uses firewalld, the following commands save and load a new firewall rule opening the HTTP port 8096 for TCP connections.
firewalld

# Open the necessary ports in your machine's firewall if you wish to permit access to the Jellyfin server from outside the host.
# This is not done automatically when using rootless Podman.
# If your distribution uses firewalld, the following commands save and load a new firewall rule opening the HTTP port 8096 for TCP connections.
8096

# Open the necessary ports in your machine's firewall if you wish to permit access to the Jellyfin server from outside the host.
# This is not done automatically when using rootless Podman.
# If your distribution uses firewalld, the following commands save and load a new firewall rule opening the HTTP port 8096 for TCP connections.
sudo firewall-cmd --add-port=8096/tcp --permanent
sudo firewall-cmd --reload

# Next generate the systemd.service file.
podman generate systemd --new --name myjellyfin > ~/.config/systemd/user/container-myjellyfin.service

# Verify and edit the systemd.service file to your liking.
# To further sandbox see Mastering systemd: Securing and sandboxing applications and services.
# An example service file is shown below. Do not blindly copy, one should make edits to the service file generated by podman.
# container-myjellyfin.service
# autogenerated by Podman 2.2.1
# Wed Feb 17 23:49:24 EST 2021

[Unit]
Description=Podman container-myjellyfin.service
Documentation=man:podman-generate-systemd(1)
Wants=network.target
After=network-online.target

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart=on-failure
ExecStartPre=/bin/rm -f %t/container-myjellyfin.pid %t/container-myjellyfin.ctr-id
ExecStart=/usr/bin/podman run --conmon-pidfile %t/container-myjellyfin.pid --cidfile %t/container-myjellyfin.ctr-id --cgroups=no-conmon -d --replace --cgroup-manager=systemd --volume jellyfin-config:/config:z --volume jellyfin-cache:/cache:z --volume jellyfin-media:/media:z -p 8096:8096 --userns keep-id --name myjellyfin jellyfin/jellyfin
ExecStop=/usr/bin/podman stop --ignore --cidfile %t/container-myjellyfin.ctr-id -t 10
ExecStopPost=/usr/bin/podman rm --ignore -f --cidfile %t/container-myjellyfin.ctr-id
PIDFile=%t/container-myjellyfin.pid
KillMode=control-group
Type=forking

# Security Features
PrivateTmp=yes
NoNewPrivileges=yes
ProtectSystem=strict
ProtectHome=yes
ProtectKernelTunables=yes
ProtectControlGroups=yes
PrivateMounts=yes
ProtectHostname=yes

[Install]
WantedBy=multi-user.target default.target

# Stop the running Jellyfin container.
podman stop myjellyfin

# Start and enable the service.
#  At this point the container will only start when the user logs in and shutdown when they log off.
#  To have the container start as the user at first login we'll have to include one more option.
systemctl --user enable --now container-myjellyfin.service

# Start and enable the service.
#  At this point the container will only start when the user logs in and shutdown when they log off.
#  To have the container start as the user at first login we'll have to include one more option.
loginctl enable-linger $USER

# To enable Podman auto-updates, enable the necessary systemd timer.
systemctl --user enable --now podman-auto-update.timer


Add or remove programs


jellyfin


jellyfin


system

# Create jellyfin.bat within your jellyfin folder containing:
jellyfin.bat

# Create jellyfin.bat within your jellyfin folder containing:
jellyfin

# To use the default library/data location at %localappdata%:
%localappdata%

# Create jellyfin.bat within your jellyfin folder containing:
# To use the default library/data location at %localappdata%:
# To use a custom library/data location (Path after the -d parameter):
# To use a custom library/data location (Path after the -d parameter) and disable the auto-start of the webapp:
<--Your install path-->\jellyfin\system\jellyfin.exe

# Create jellyfin.bat within your jellyfin folder containing:
# To use the default library/data location at %localappdata%:
# To use a custom library/data location (Path after the -d parameter):
# To use a custom library/data location (Path after the -d parameter) and disable the auto-start of the webapp:
<--Your install path-->\jellyfin\system\jellyfin.exe -d <--Your install path-->\jellyfin\data

# Create jellyfin.bat within your jellyfin folder containing:
# To use the default library/data location at %localappdata%:
# To use a custom library/data location (Path after the -d parameter):
# To use a custom library/data location (Path after the -d parameter) and disable the auto-start of the webapp:
<--Your install path-->\jellyfin\system\jellyfin.exe -d <--Your install path-->\jellyfin\data -noautorunwebapp

# To use the default library/data location at %localappdata%:
%localappdata%

# To use the default library/data location at %localappdata%:
<--Your install path-->\jellyfin\system\jellyfin.exe

# To use a custom library/data location (Path after the -d parameter):
<--Your install path-->\jellyfin\system\jellyfin.exe -d <--Your install path-->\jellyfin\data

# To use a custom library/data location (Path after the -d parameter) and disable the auto-start of the webapp:
<--Your install path-->\jellyfin\system\jellyfin.exe -d <--Your install path-->\jellyfin\data -noautorunwebapp

# Run
jellyfin.bat

# Open your browser at http://<--Server-IP-->:8096 (if auto-start of webapp is disabled)
http://<--Server-IP-->:8096


system


system-bak


jellyfin


system


jellyfin.bat


system


system-bak


system


jellyfin.bat


.app


.app


.app


~/.config/jellyfin/


~/.local/share/jellyfin/


cd


./jellyfin


CTRL+C


cd


./jellyfin


CTRL+C


/Application/jellyfin-version

# You will need to enable rpmfusion as ffmpeg is a dependency of the jellyfin server package
# You do not need to manually install ffmpeg, it will be installed by the jellyfin server package as a dependency
sudo dnf install https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm

# Install the jellyfin server
sudo dnf install (link to version jellyfin server you want to install)

# Install the jellyfin web interface
sudo dnf install (link to web RPM you want to install)

# Enable jellyfin service with systemd
sudo systemctl start jellyfin

# Enable jellyfin service with systemd
sudo systemctl enable jellyfin

# Open jellyfin service with firewalld
# This will open the following ports
# 8096 TCP used by default for HTTP traffic, you can change this in the dashboard
# 8920 TCP used by default for HTTPS traffic, you can change this in the dashboard
# 1900 UDP used for service auto-discovery, this is not configurable
# 7359 UDP used for auto-discovery, this is not configurable
sudo firewall-cmd --permanent --add-service=jellyfin

# Reboot your machine
sudo systemctl reboot

# Go to localhost:8096 or ip-address-of-jellyfin-server:8096 to finish setup in the web UI
localhost:8096

# Go to localhost:8096 or ip-address-of-jellyfin-server:8096 to finish setup in the web UI
ip-address-of-jellyfin-server:8096

# Install HTTPS transport for APT as well as gnupg and lsb-release if you haven't already.
gnupg

# Install HTTPS transport for APT as well as gnupg and lsb-release if you haven't already.
lsb-release

# Install HTTPS transport for APT as well as gnupg and lsb-release if you haven't already.
sudo apt install apt-transport-https gnupg lsb-release

# Import the GPG signing key (signed by the Jellyfin Team):
curl -fsSL https://repo.jellyfin.org/debian/jellyfin_team.gpg.key | gpg --dearmor -o /etc/apt/trusted.gpg.d/debian-jellyfin.gpg

# Add a repository configuration at /etc/apt/sources.list.d/jellyfin.list:
/etc/apt/sources.list.d/jellyfin.list

# Add a repository configuration at /etc/apt/sources.list.d/jellyfin.list:
# Supported releases are buster and bullseye.
echo "deb [arch=$( dpkg --print-architecture )] https://repo.jellyfin.org/debian $( lsb_release -c -s ) main" | sudo tee /etc/apt/sources.list.d/jellyfin.list

# Supported releases are buster and bullseye.
buster

# Supported releases are buster and bullseye.
bullseye

# Update APT repositories:
sudo apt update

# Install Jellyfin:
sudo apt install jellyfin

# Manage the Jellyfin system service with your tool of choice:
sudo service jellyfin status
sudo systemctl restart jellyfin
sudo /etc/init.d/jellyfin stop

# Download the desired jellyfin and jellyfin-ffmpeg .deb packages from the repository.
jellyfin

# Download the desired jellyfin and jellyfin-ffmpeg .deb packages from the repository.
jellyfin-ffmpeg

# Download the desired jellyfin and jellyfin-ffmpeg .deb packages from the repository.
.deb

# Install the downloaded .deb packages:
.deb

# Install the downloaded .deb packages:
sudo dpkg -i jellyfin_*.deb jellyfin-ffmpeg_*.deb

# Use apt to install any missing dependencies:
apt

# Use apt to install any missing dependencies:
sudo apt -f install

# Manage the Jellyfin system service with your tool of choice:
sudo service jellyfin status
sudo systemctl restart jellyfin
sudo /etc/init.d/jellyfin stop

# Remove the old /etc/apt/sources.list.d/jellyfin.list file:
/etc/apt/sources.list.d/jellyfin.list

# Remove the old /etc/apt/sources.list.d/jellyfin.list file:
sudo rm /etc/apt/sources.list.d/jellyfin.list

# Install HTTPS transport for APT if you haven't already:
sudo apt install apt-transport-https

# Enable the Universe repository to obtain all the FFMpeg dependencies:
# If the above command fails you will need to install the following package software-properties-common.
# This can be achieved with the following command sudo apt-get install software-properties-common
sudo add-apt-repository universe

# If the above command fails you will need to install the following package software-properties-common.
# This can be achieved with the following command sudo apt-get install software-properties-common
software-properties-common

# If the above command fails you will need to install the following package software-properties-common.
# This can be achieved with the following command sudo apt-get install software-properties-common
sudo apt-get install software-properties-common

# Import the GPG signing key (signed by the Jellyfin Team):
curl -fsSL https://repo.jellyfin.org/ubuntu/jellyfin_team.gpg.key | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/debian-jellyfin.gpg

# Add a repository configuration at /etc/apt/sources.list.d/jellyfin.list:
/etc/apt/sources.list.d/jellyfin.list

# Add a repository configuration at /etc/apt/sources.list.d/jellyfin.list:
# Supported releases are bionic, cosmic, disco, eoan, and focal.
echo "deb [arch=$( dpkg --print-architecture )] https://repo.jellyfin.org/ubuntu $( lsb_release -c -s ) main" | sudo tee /etc/apt/sources.list.d/jellyfin.list

# Supported releases are bionic, cosmic, disco, eoan, and focal.
bionic

# Supported releases are bionic, cosmic, disco, eoan, and focal.
cosmic

# Supported releases are bionic, cosmic, disco, eoan, and focal.
disco

# Supported releases are bionic, cosmic, disco, eoan, and focal.
eoan

# Supported releases are bionic, cosmic, disco, eoan, and focal.
focal

# Update APT repositories:
sudo apt update

# Install Jellyfin:
sudo apt install jellyfin

# Manage the Jellyfin system service with your tool of choice:
sudo service jellyfin status
sudo systemctl restart jellyfin
sudo /etc/init.d/jellyfin stop

# Enable the Universe repository to obtain all the FFMpeg dependencies, and update repositories:
sudo add-apt-repository universe
sudo apt update

# Download the desired jellyfin and jellyfin-ffmpeg .deb packages from the repository.
jellyfin

# Download the desired jellyfin and jellyfin-ffmpeg .deb packages from the repository.
jellyfin-ffmpeg

# Download the desired jellyfin and jellyfin-ffmpeg .deb packages from the repository.
.deb

# Install the required dependencies:
sudo apt install at libsqlite3-0 libfontconfig1 libfreetype6 libssl1.0.0

# Install the downloaded .deb packages:
.deb

# Install the downloaded .deb packages:
sudo dpkg -i jellyfin_*.deb jellyfin-ffmpeg_*.deb

# Use apt to install any missing dependencies:
apt

# Use apt to install any missing dependencies:
sudo apt -f install

# Manage the Jellyfin system service with your tool of choice:
sudo service jellyfin status
sudo systemctl restart jellyfin
sudo /etc/init.d/jellyfin stop
